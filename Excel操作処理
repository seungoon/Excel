※参考サイト： https://qiita.com/midori44/items/acab9106e6dad9653e73
※懸念点　　： https://blogs.msdn.microsoft.com/office_client_development_support_blog/2012/05/23/office/
※サンプル　： http://hanatyan.sakura.ne.jp/vb2005/vb2013excel01.htm
              http://nkurilog.blogspot.jp/2018/01/vbnetc-excel.html

どうして検索上位がMicrosoft.Office.Interop.Excelを使う方法ばかりなのか
Excel操作といえば VBA であり、豊富な VBA のサンプルが数多く存在すること
VB.NET と VBA は構文がほぼ一緒であるため、VBA で書かれたコードの多くがMicrosoft.Office.Interop.Excelを使えば VB.NET でもそのまま動作すること
C# と VB.NET は共通のライブラリが使用できること
という歴史的、言語的な理由からだと思われます。

しかし、Microsoft.Office.Interop.Excelを使う方法は以下に挙げる理由によりオススメしません。
今から書くのであれば、まず ClosedXML や NPOI といったオープンソースライブラリの使用を検討するべきです。

（以下、「COM参照」を「Microsoft.Office.Interop.Excelを使ってExcelを外部操作する手法」という意味で使用させていただきます。COMの意味については https://ja.wikipedia.org/wiki/Component_Object_Model などを参照してください）

Microsoft.Office.Interop.Excelを使う方法を推奨しない理由
処理が遅い
正しくは、「注意して書かなければ」とても処理が遅くなる、です。
COM参照では、実際に裏でExcelアプリケーションを立ち上げて操作することでExcelファイルを読み書きします。
そのためまず最初にEXCEL.EXEが起動するための時間がかかります。
起動してからもシートやセルへのアクセスはExcelを経由するため、できるだけアクセス回数を減らすような実装方法を意識する必要があります。

Excelのインストールが必須
当然ですが、Excelアプリケーションを操作するためにはExcelがインストールされている必要があります。
exe形式にして配布する場合、ExcelがインストールされていないPCでは動作しません。
また、サーバーサイドで実装した場合はOfficeのライセンス違反となる可能性があります。
（参考: https://support.microsoft.com/ja-jp/kb/257757 ）

プロセス解放漏れのリスク
推奨できない最大の理由。
冒頭で述べた、COMオブジェクト解放が書かれていない情報を参考にしてはいけないのはこのためです。
C# および VB.NET では、不要になったメモリをガベージコレクタが自動的に解放してくれます。
しかしCOM参照の場合は、「このExcelはもう使用しません」と宣言しない限り、自動的に解放されることはありません。
この宣言が非常に厄介で、参照したブック、参照したシート、参照したセルの全てに対してSystem.Runtime.InteropServices.Marshal.ReleaseComObject()をしなければいけないため、正しくコードを書かなければ簡単にCOMオブジェクト解放漏れが発生します。
もし解放漏れが残ったままプログラムが途中で終了してしまった場合、プロセスにEXCEL.EXEがいつまでも残り続けることになります。
20160407.PNG
↑ 極端な例ですが、わりと冗談ではないです

オープンソースライブラリを使用する
上記の問題を避けるためにもEXCEL.EXEを使用しないライブラリを使って開発することを強くオススメします。
ここでは ClosedXML と NPOI の2つを紹介します。
自分は使ったこと無いのですが EPPlus も評判が良さそうです。

ClosedXML
https://closedxml.codeplex.com/

Microsoft は Office 2007 から、それまでの独自規格(.xls, .doc, .ppt)を廃止して、オープンな規格であるOpen XML(.xlsx, .docx, .pptx)に移行しました。
そのOpen XMLを扱うために提供されているライブラリがDocumentFormat.OpenXmlなのですが、これがExcelファイルを扱うには使い勝手の悪いものであったため、Excel処理の部分だけを使いやすい形式にラップしたライブラリがClosedXMLになります。

メリット
コア部分が Microsoft の純正ライブラリであるという安心感
後述の NPOI よりも扱いやすい

デメリット
Open XML規格用に作られたものであるため、旧形式ファイル(.xls)を読み込むことができない

サンプルコード
Excelファイルを読み込んで、A列のセルの値を先頭行から最終行まで取得するサンプル

ClosedXML
using ClosedXML.Excel;

XLWorkbook workbook = new XLWorkbook("d:\\Book1.xlsx");
IXLWorksheet worksheet = workbook.Worksheet(1);
int lastRow = worksheet.LastRowUsed().RowNumber();
for (int i = 1; i <= lastRow; i++)
{
    IXLCell cell = worksheet.Cell(i, 1);
    Console.WriteLine(cell.Value);
}
NPOI
https://npoi.codeplex.com/

NPOIは、15年もの歴史を持つJavaライブラリApache POI( https://poi.apache.org/ )の.NET移植版。
2012年頃までは旧形式ファイル(.xls)にしか対応していませんでしたが、バージョン2.0になってから.xlsx形式も扱えるようになりました。

メリット
移植元である Apache POI には長年使用されてきた実績がある
新形式ファイル(.xlsx)と旧形式ファイル(.xls)の両方に対応している
ClosedXML よりも高速

デメリット
とくになし

サンプルコード
NPOI
using NPOI.SS.UserModel;

// （WorkbookFactory.Create()を使ってinterfaceで受け取れば、xls, xlsxの両方に対応できます）
IWorkbook workbook = WorkbookFactory.Create("d:\\Book1.xlsx");
ISheet worksheet = workbook.GetSheetAt(0);
int lastRow = worksheet.LastRowNum;
for (int i = 0; i <= lastRow; i++)
{
    IRow row = worksheet.GetRow(i);
    ICell cell = row?.GetCell(0);
    Console.WriteLine(cell?.StringCellValue);
}
個人的には、旧形式の対応が不要なら ClosedXML のほうが使いやすいと感じています。

ClosedXMLのほうがセルの取得方法が直感的
NPOIでは空行または空セルを参照するとオブジェクトがnullになってしまう（しかし C# 6.0 でnull条件演算子?.が追加されたので、上記サンプルのように簡潔に書けるようになりました）
ClosedXMLでは行番号や列番号が0でなく1から始まる（好みの問題ですが、ExcelシートはA1から始まるので行番号とインデックスが一致する）
どうしてもMicrosoft.Office.Interop.Excelを使いたい場合
デメリットは冒頭で挙げましたが、COM参照を使うメリットもあります。

実は ClosedXML や NPOI だと、まれにファイルによっては読み込みに失敗することがあります。
経験上、Excelシートに埋め込まれた画像やマクロなどが原因となってエラーになることが多いです。
COM参照であれば実際にファイルを開くのはExcelアプリケーションなので、マクロ付きであろうが拡張子が.csvになっていようが（Excelのバージョンが古くない限り）どんなファイルでも読み込むことができます。

サンプルコード
先述したCOMオブジェクトの解放を確実にやるのであれば、先ほどのサンプルはここまで書く必要があります。

Microsoft.Office.Interop.Excel
using System.Runtime.InteropServices;
using Microsoft.Office.Interop.Excel;

var excelApplication = new Microsoft.Office.Interop.Excel.Application();
try
{
    Workbooks workbooks = excelApplication.Workbooks;
    try
    {
        Workbook workbook = workbooks.Open("d:\\Book1.xlsx");
        try
        {
            Sheets worksheets = workbook.Sheets;
            try
            {
                Worksheet worksheet = worksheets[1];
                try
                {
                    // 使用範囲を一括で二次元配列にコピー
                    Object[,] rangeArray;
                    Range usedRange = worksheet.UsedRange;
                    try
                    {
                        rangeArray = usedRange.Value;
                    }
                    finally { Marshal.ReleaseComObject(usedRange); }

                    // 二次元配列に対してループを回す
                    int lastRow = rangeArray.GetLength(0);
                    for (int i = 0; i < lastRow; i++)
                    {
                        Console.WriteLine(rangeArray[i, 0]);
                    }
                }
                finally { Marshal.ReleaseComObject(worksheet); }
            }
            finally { Marshal.ReleaseComObject(worksheets); }
        }
        finally
        {
            if (workbook != null)
            {
                workbook.Close(false);
            }
            Marshal.ReleaseComObject(workbook);
        }
    }
    finally { Marshal.ReleaseComObject(workbooks); }
}
finally
{
    if (excelApplication != null)
    {
        excelApplication.Quit();
    }
    Marshal.ReleaseComObject(excelApplication);
}
COM参照で書く際の注意事項としては、

Workbook workbook = excelApplication.Workbooks.Open("d:\\Book1.xlsx");のように繋げて書いてしまうと、Workbooksオブジェクトに対してReleaseComObject()できなくなるため、すべて変数に割り当てるようにします。
finally{}の中でMarshal.ReleaseComObject()を呼び出すことによって、どこで例外が発生しても確実にCOMオブジェクトを解放することができます（が、毎回ここまで書くのは大変なので何度も使うのであればIDisposableの実装クラスを作成したほうがいいです）。
ループの中で直接Cellオブジェクトを読んでしまうと非常に時間がかかるため、セルの値を取得するだけであれば、あらかじめ必要なシート範囲を二次元オブジェクト配列にコピーすることで劇的に高速化できます。
最後に
サンプルコードでは触りの部分だけしか紹介できていないので、書き込みや保存については各ライブラリのドキュメントや他の紹介記事を参照ください。


*******************************************************************************************************

　下記プログラムコードに関する補足・注意事項　
動作確認：Windows 8.1 (Windows 7) / VB2013 (VB2010) / Framework 4.5.1 / 対象の CPU：x86 / Excel 2013
Option　：[Compare Text] [Explicit On] [Infer On] [Strict On]
Imports ：Microsoft.Office.Interop
参照設定：Microsoft Excel 15.0 Object Library /　　　　　　　参照設定方法参照
使用コン：Button1 ～ Button2 
トロール：
このサンプル等の内容を無断で転載、掲載、配布する事はお断りします。(私の修正・改訂・削除等が及ばなくなるので)
必要ならリンクをはるようにして下さい。(引用の場合は引用元のリンクを明記して下さい)
このページのトップへ移動します。 １．VB2013 から Excel 2013 を操作する為の基本的な操作方法(起動・書き込み・保存・終了処理)
下記コード及びカラー化は、自作[Excel Com オブジェクトの解放漏れチェックツール(09_Xls_10)]ツールでの実行結果です。

Imports Microsoft.Office.Interop　　　　　'Excel の COM コンポーネント関係
Imports Microsoft.Office.Core　　　　　　 'Excel の定数関係

Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
'Excel を起動のボタンの処理
　　'=============================================================================
　　Call ExcelOpen("", "")　　 '新規ファイルをオープンして、Excel を起動

　　'既存のファイルをオープンして、Excel を起動する場合
　　'Call ExcelOpen(System.IO.Path.GetFullPath("..\..\..\data\DBTest.xls"), "Sheet1")
　　'=============================================================================

　　'--------------------------------------------------------------------------
　　'１．単純なデータの入力と計算式の入力例
　　Dim xlRange As Excel.Range
　　Dim strDat(2, 0) As Object
　　xlRange = xlSheet.Range("A1:A3")　　'データの入力セル範囲
　　strDat(0, 0) = "10"　　　　　　　　 'データの作成
　　strDat(1, 0) = "20"
　　strDat(2, 0) = "=Sum(A1:A2)"　　　　'計算式
　　xlRange.Value = strDat　　　　　　　'セルへデータの入力
　　MRComObject(xlRange)　　　　　　　　'Range オブジェクトの解放処理
　　'--------------------------------------------------------------------------
End Sub

Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
'Excel を終了のボタンの処理
　　'=============================================================================
　　'Excelファイルを上書き保存(True 又省略すれば)して終了処理を実行
　　Call ExcelClose(IO.Path.GetFullPath(".\Test.xlsx"), False)　'False の場合保存しないで終了
　　'=============================================================================
End Sub


#Region "Private 変数の宣言"

Private xlApp As Excel.Application
Private xlBooks As Excel.Workbooks
Private xlBook As Excel.Workbook
Private xlSheets As Excel.Sheets
Private xlSheet As Excel.Worksheet
Private frgClose As Boolean　　　　　'ユーザーが Excel を閉じようとしたかのフラグ

#End Region

#Region "Excel の起動時の処理関係"

Private Sub ExcelOpen(ByVal FilePath As String, ByVal SheetName As String)
'Excel のオープン処理用プロシージャ
　　frgClose = False　 '起動中は、ユーザーが Excel を閉じれないように
　　xlApp = New Excel.Application

　　'Excel の WorkbookBeforeClose イベントを取得
　　AddHandler xlApp.WorkbookBeforeClose, AddressOf xlApp_WorkbookBeforeClose

　　xlBooks = xlApp.Workbooks
　　If FilePath.Length = 0 Then
　　　　'新規のファイルを開く場合
　　　　xlBook = xlBooks.Add
　　　　xlSheets = xlBook.Worksheets
　　　　xlSheet = CType(xlSheets.Item(1), Excel.Worksheet)
　　Else
　　　　'既存のファイルを開く場合
　　　　xlBook = xlBooks.Open(FilePath)
　　　　xlSheets = xlBook.Worksheets
　　　　xlSheet = CType(xlSheets(SheetName), Excel.Worksheet)
　　End If
　　xlApp.Visible = True
End Sub

#End Region

#Region "Excel の終了・保存処理関係"

Private Sub ExcelClose(ByVal FilePath As String, Optional ByVal CancelSave As Boolean = True)
'Excelファイルを上書き保存して終了処理用プロシージャ
　　frgClose = True　　　　　　　 'True : 閉じる事ができる(プログラムからの終了なので)
　　xlApp.DisplayAlerts = False　 '保存時の問合せのダイアログを非表示に設定
　　If CancelSave Then
　　　　Dim kts As String = System.IO.Path.GetExtension(FilePath).ToLower()
　　　　Dim fm As Excel.XlFileFormat
　　　　'拡張子に合せて保存形式を変更
　　　　Select Case kts
　　　　　　Case ".csv"　　'CSV (カンマ区切り) 形式
　　　　　　　　fm = Excel.XlFileFormat.xlCSV
　　　　　　Case ".xls"　　'Excel 97～2003 ブック形式
　　　　　　　　fm = Excel.XlFileFormat.xlExcel8
　　　　　　Case ".xlsx"　 'Excel 2007～ブック形式
　　　　　　　　fm = Excel.XlFileFormat.xlOpenXMLWorkbook
　　　　　　Case ".xlsm"　 'Excel 2007～マクロ有効ブック形式
　　　　　　　　fm = Excel.XlFileFormat.xlOpenXMLWorkbookMacroEnabled
　　　　　　Case Else　　　'必要なものは、追加して下さい。
　　　　　　　　fm = Excel.XlFileFormat.xlWorkbookDefault
　　　　　　　　MessageBox.Show("ファイルの保存形式を確認して下さい。")
　　　　End Select
　　　　Try
　　　　　　xlBook.SaveAs(Filename:=FilePath, FileFormat:=fm)　　'ファイルに保存
　　　　Catch ex As Exception
　　　　　　MessageBox.Show(ex.Message)
　　　　End Try
　　End If
　　MRComObject(xlSheet)　　　　　'xlSheet の解放
　　MRComObject(xlSheets)　　　　 'xlSheets の解放
　　xlBook.Close()　　　　　　　　'xlBook を閉じる
　　MRComObject(xlBook)　　　　　 'xlBook の解放
　　MRComObject(xlBooks)　　　　　'xlBooks の解放
　　xlApp.Quit()　　　　　　　　　'Excelを閉じる 
　　MRComObject(xlApp)　　　　　　'xlApp を解放
End Sub

Private Sub xlApp_WorkbookBeforeClose(ByVal Wb As Excel.Workbook, ByRef Cancel As Boolean)
'VB2010 から Excel の WorkbookBeforeClose イベントを監視してユーザーが Excel を閉じれないようにする
'(VB2010 から Excel を操作している途中でユーザーが勝手に Excel を閉じるとエラーが発生するので)
　　If frgClose = False Then
　　　　Cancel = True　　 'ユーザーが Excel を閉じようとしたので、処理をキャンセルする
　　Else
　　　　Cancel = False　　'キャンセルしない(閉じる)
　　End If
End Sub

#End Region

#Region "COM オブジェクトの解放(デクリメント処理)処理関係"

'今まで使っていた方法では、Option Strict On の時にエラーとなったので、下記の
'魔界の仮面弁士さんの投稿を使用させて頂きました。詳しくは、下記を参照してください。
'http://hanatyan.sakura.ne.jp/vbnetbbs/wforum.cgi?mode=allread&no=6370#6374

'VB2005/VB2008/VB2010/VB2013 用
''' <summary>
''' COMオブジェクトの参照カウントをデクリメントします。
''' </summary>
''' <typeparam name="T">(省略可能)</typeparam>
''' <param name="objCom">
''' COM オブジェクト持った変数を指定します。
''' このメソッドの呼出し後、この引数の内容は Nothing となります。
''' </param>
''' <param name="force">
''' すべての参照を強制解放する場合はTrue、現在の参照のみを減ずる場合はFalse。
''' </param>
Public Shared Sub MRComObject(Of T As Class)(ByRef objCom As T,
　　　　　　　　　　　　　　　　　　 Optional ByVal force As Boolean = False)
　　If objCom Is Nothing Then
　　　　Return
　　End If
　　Try
　　If System.Runtime.InteropServices.Marshal.IsComObject(objCom) Then
　　　　If force Then
　　　　　　System.Runtime.InteropServices.Marshal.FinalReleaseComObject(objCom)
　　　　Else
　　　　　　System.Runtime.InteropServices.Marshal.ReleaseComObject(objCom)
　　　　End If
　　End If
　　Finally
　　　　objCom = Nothing
　　End Try
End Sub

#End Region

このページのトップへ移動します。 ２．Excelのプロセスが正常に終了しない理由
　.NET 対応の Visual Basic から Excel VBA を使って、Visual Basic から Excel を操作した場合、タスクマネージャーに Excel.exe が残ったままになる事が、VB6.0 の頃よりはるかに多く発生しております。

　この事は、サポート情報の［Visual Studio .NET クライアントからオートメーション後に Office アプリケーションが終了しません］にも書かれているように、COM オブジェクトを参照すると、参照カウントが一つアップします。
参照が解放された時に参照カウントが一つ減り、参照カウントが、0 の時でないとCOM オブジェクトは終了しません。

　従って、COM オブジェクトを使用後は、プログラム上から、Marshal.ReleaseComObject メソッド 等を使って参照カウントをデクリメント(参照カウントを 1減じる処理)する必要があります。
ここで言うCOM オブジェクトとはどのような物が該当するのかを知っておく必要がありますので、下記にまとめて見ました。
　　　　COM オブジェクト 及び Com オブジェクト等を返すプロパティ 一覧

　そこで問題になるのが、上記のようなCOM オブジェクトを使用した場合は、使用するCOM オブジェクト１個対して夫々デクリメント操作が必要なのに、複数のCOM オブジェクトを同時に参照すると、どれか１個だけしかデクリメントができません。

　例えば、フォントを太字にする場合、VBA や VB6.0 では、xlSheet.Range("A1").Font.Bold = True のような書き方が一般的でした。
これをVB.NET(便宜上.NET系のVisual Basicをこう書かせて頂きます)で使用すると Excel.exe がプロセスに残ってしまいます。
そこで、使用したCom オブジェクトに対して各々デクリメントしてやる必要があります。

　デクリメントするには、Com オブジェクト を変数に受けて使用し、使い終わった時点で、Marshal.ReleaseComObject メソッドを使って使用したCom オブジェクト の変数に対してデクリメントする必要があります。
xlSheet(Worksheet オブジェクトを変数にうけたもの)　Range　Font の３つのCom オブジェクトを使った事になりますからそれぞれのCom オブジェクトを別々に変数に受けて使用しないとデクリメント操作ができません。

　従って、xlSheet　は、すでに変数にうけたものですから必要はありませんが、Range や Font は、一旦変数に受けて使用する必要があり、従って、VB.NET 用にコードを書くと下記のようになります。

　 Dim xlRange As Excel.Range　　　 '使用する Range オブジェクト用の変数を宣言する
　 xlRange = xlSheet.Range("A1")　　'Range オブジェクト用の変数に、Range("A1") を代入する
　 Dim xlFont As Excel.Font　　　　 '使用する Font オブジェクト用の変数を宣言する
　 xlFont = xlRange.Font　　　　　　'Font オブジェクト用の変数に、Range("A1")の Font を代入する
　 xlFont.Bold = True　　　　　　　 'Range("A1")の Font の Bold プロパティを太字に設定する
　 System.Runtime.InteropServices.Marshal.ReleaseComObject(xlFont)　'Font(xlFont)オブジェクトのデクリメントの実施 
　 System.Runtime.InteropServices.Marshal.ReleaseComObject(xlRange) 'Range(xlRange)オブジェクトのデクリメントの実施 

　上記のように使用した夫々の Com オブジェクトは、変数に受けて、その変数に対してデクリメントしないと Com オブジェクトは終了せず、Excel を閉じても、タスクマネージャーのプロセス一覧のところに、Excel.exe が残ったままになるのです。

　ここで、問題になるのが、どれが、Com オブジェクトで、いつデクリメントする必要があるのかと言う事になります。
COM オブジェクト及び Com オブジェクト等を返すプロパティ等を知っておく事は無論の事、Cells プロパティのような Default プロパティがある Com オブジェクトを返すプロパティ等を使用した場合、つい下記のように使ってしまいがちですが、これでは、十分にデクリメントがされず、解放されません。

　 Dim xlCells As Excel.Range
　 'xlCells = xlSheet.Cells(1, 1)　　'Strict On では、暗黙的な変換はできません とエラー表示になる
　 xlCells = DirectCast(xlSheet.Cells(1, 1), Excel.Range)　'従って、このように型変換する
　 Dim xlFont As Excel.Font
　 xlFont = xlCells.Font
　 xlFont.Bold = True
　 MRComObject(xlFont)　 'Font(xlFont) オブジェクトのデクリメントの実施 
　 MRComObject(xlCells)　'Range(xlCells) オブジェクトのデクリメントの実施 

xlSheet.Cells(1, 1) は、Default プロパティ 省略した書き方なので、正しくは、xlsheet.Cells._Default(1, 1) 又は、xlSheet.Cells.Item(1, 1) となり、Cells が返す Range オブジェクトと_Default が返すRange オブジェクトを別々に変数に受けてデクリメントしないと解放されません。(正しくは、下記のようになります。)

　 Dim xlCells As Excel.Range
　 Dim xlRange As Excel.Range
　 xlCells = xlSheet.Cells
　 xlRange = DirectCast(xlCells.Item(1, 1), Excel.Range)
　 Dim xlFont As Excel.Font
　 xlFont = xlRange.Font
　 xlFont.Bold = True
　 MRComObject(xlFont)
　 MRComObject(xlRange)
　 MRComObject(xlCells)
　
　このように一旦、Range オブジェクトに変換しなければならず、VB6.0 や VBA のような使い方ができず、コードも複雑になるし、なにより間違った使い方をすると解放漏れの恐れがあり、Cells プロパティのようなDefault プロパティのある、Rangr オブジェクトを返す、プロパティのご使用はお薦めできません。
(どうせ、Range オブジェクトに変換するなら、最初からRange オブジェクトを使うべきかと)

　このようなDefault プロパティを返すプロパティは、他にも色々ありますので注意して下さい。
見分け方としては、Com オブジェクトを返すプロパティの中で、最後に複数系を表す s がついているプロパティで、メンバーに、Item プロパティが存在するようなものは、十分確認して下さい。
代表的なものとしては、Workbooks　Sheets　Cells　Rows　Columns　等があります。

　もう一つの問題点のいつデクリメントする必要があるのかと言う事ですが、基本的には、[使い終わった時点]と言う事になりますが、それは、変数のスコープを指しているのと勘違いしている場合がありますが、参照先を変更した場合等にも摘要されます。

下記のような場合、どの位置でデクリメントを実施すべきでしょうか？
　 Dim xlRange As Excel.Range = Nothing
　 xlRange = xlSheet.Range("A1")
　 xlRange.Value = "123"
　 Dim xlFont As Excel.Font
　 xlFont = xlRange.Font
　 xlFont.Bold = True
　 xlRange = xlSheet.Range("A2")
　 xlRange.Value = "321"
　 xlFont = xlRange.Font
　 xlFont.Bold = True
　 For c As Integer = 1 To 10
　 　 xlRange = xlSheet.Range(R1ToA1(1, c))
　 　 xlRange.Value = c
　 Next c

正しくは、下記のようになります。
　 Dim xlRange As Excel.Range = Nothing
　 xlRange = xlSheet.Range("A1")
　 xlRange.Value = "123"
　 Dim xlFont As Excel.Font
　 xlFont = xlRange.Font
　 xlFont.Bold = True
　 MRComObject(xlFont)
　 MRComObject(xlRange)
　 '次の行で、xlRange は、A1 を参照していたのに、A2 に参照先が変わるので変わると
　 'xlRange は、Range("A1") ではなくなり、xlRange をデクリメントしてもRange("A1") の
　 'Com オブジェクトのデクリメントは、行われず解放できなくので参照先が変更される前に
　 '上記の行でデクリメントをしておく必要があります。
　 xlRange = xlSheet.Range("A2")
　 xlRange.Value = "321"
　 xlFont = xlRange.Font
　 xlFont.Bold = True
　 MRComObject(xlFont)　　 '同様に Font オブジェクトも参照先が変更されたので
　 MRComObject(xlRange)　　'同様にここでも
　 For c As Integer = 1 To 10
　　　xlRange = xlSheet.Range(R1ToA1(1, c))
　　　xlRange.Value = c
　　　MRComObject(xlRange) '同様にここでも
　 Next c

これが、ここで言う[使い終わった時点]と言う事です。

　上記のコードは、実際にご自分で十分に試して見て頭に叩き込んでおいて下さい。
どれが、Com オブジェクトで、いつデクリメントする必要があるのかと言う事を十分理解してコードを書けば、Excel.exe がプロセスに残るという事はなくなるはずです。

その他、VB.NET(VB2005/VB2008/VB2010) 系からExcel を操作する上での注意事項をまとめてみました。

１．開発環境は、参照設定をして、事前バインディング(アーリーバインディング)で使用し、Option Strict On に設定した
　　VB2010(VB2008) 以上で開発するようにして下さい。
　　事前バインディングで使用されると解放もれが発生し易く、原因も掴めにくかったりもしますので、掲示板で質問される
　　ようなレベルの方は、絶対に使用されない事をお薦めします。（自分で問題解決ができるのなら別ですが）

２．次に、起動・終了だけの基本的なプログラムを書いた時点でテストしてプロセスが終了しているか確認しておく。
　　開発中は、下記のようなコードで、起動・終了をしながらテストすると便利です。
　　(サンプル投稿用掲示板に投稿してある起動・終了用コード)

３．コードはマクロ等をそのままペーストせず、キーボードから入力する、そうする事によって自動メンバー表示や
　　パラメーターヒントが表示される。特に、VB2010 等を使用するとエラーの修正機能があったりとかで、VB2005 等より
　　かなり便利になっております。

４．自動メンバー表示等が表示されない場合は、コードの使い方が間違っている場合があるのでヘルプ等で確認する事。

５．今までと違った使い方や使った事のないプロパティ等を使用した場合は、その時点でプロセスが終了するか確認しておく。

６．コードの区切りの時点でそこまでの動作でプロセスがきちんと終了する事を確認しながら進める。

以上の６項目を守れば少なくとも、他人に間違い探しを依頼する事はないはずです。
作ってしまってからプロセスが終了していない事に気が付いたのなら、確認できている部分を除いてコメント化して、確認しながら順次コメントを外して原因箇所を掴んで下さい。

*************************************************************************************************************************

VB.NETとC#からのExcel出力
検索すればあちこちで見つかる VB.Net および C# からの Excel 出力ですが、意外と以下の条件を満たすものがないようですので、サンプルコードを掲載しておきます。

条件
Excel 終了時にきちんと COM の開放が行われ、EXCEL.EXE が終了する。
高速化（2次元配列を使用）している。
書式設定が行われている。
遅延バインディング
参考
Excelファイルを C# と VB.NET で読み込む “正しい” 方法 - Qiita

はじめに “Excel C#” や “Excel VB.NET” でググった新人プログラマが、古い情報や間違った情報で茨の道を選ばずに済むようにと思って書きました。 この記事は、Windows で Visual Studio を使用したデスクトップアプリケーション開発を想定しています。 VB.NET でも作成可能ですが、サンプルコードでは C# 6.0 を使用しています。どちらでもいいなら C# を使いましょう。 C# または VB.NET でExcel…


qiita.com
サンプルコードは、Microsoft.Office.Interop.Excel を使用しています。 
（リンク先では推奨されていないのですが、外部DLLを使わずにすみますので）

サンプルコード
仕様
DataTable の内容を新規 Book に出力し、そのまま（保存せずに）表示します。
String 型は文字列にしています。DateTime型は、”yyyy/mm/dd”の形式にしています。（Date 型と DateTime 型で書式を変えたい場合は文字列化した方が良いと思います。）
罫線と列幅の自動調整まで行っています。
VB.NET
Option Strict Off
Imports Microsoft.VisualBasic
Imports System.Data
    Public Sub ExportExcel(ByVal dt As DataTable)
        Dim xlApp As Object = Nothing
        Dim xlBooks As Object = Nothing
        Dim xlBook As Object = Nothing
        Dim xlSheet As Object = Nothing
        Dim xlCells As Object = Nothing
        Dim xlRange As Object = Nothing
        Dim xlCellStart As Object = Nothing
        Dim xlCellEnd As Object = Nothing
 
        Try
            xlApp = CreateObject("Excel.Application")
            xlBooks = xlApp.Workbooks           
            xlBook = xlApp.Workbooks.Add
            xlSheet = xlBook.WorkSheets(1)
            xlCells = xlSheet.Cells
 
            Dim dc As DataColumn
            Dim columnData(dt.Rows.Count, 1) As Object
            Dim row As Integer = 1
            Dim col As Integer = 1
 
            For col = 1 To dt.Columns.Count
                row = 1
                dc = dt.Columns(col - 1)
                'ヘッダー行の出力
                xlCells(row, col).value = dc.ColumnName
                row = row + 1
 
                ' 列データを配列に格納
                For i As Integer = 0 To dt.Rows.Count - 1
                    columnData(i, 0) = String.Format(dt.Rows(i)(col - 1))
                Next
                xlCellStart = xlCells(row, col)
                xlCellEnd = xlCells(row + dt.Rows.Count - 1, col)
                xlRange = xlSheet.Range(xlCellStart, xlCellEnd)
                ' Excel書式設定
                Select Case dc.DataType.Name
                    Case "String"
                        xlRange.NumberFormatLocal = "@"
                    Case "DateTime"
                        xlRange.NumberFormatLocal = "yyyy/mm/dd"
                        'Case "Decimal"
                        '    xlRange.NumberFormatLocal = "#,###"
                End Select
                xlRange.value = columnData
            Next
 
            xlCells.EntireColumn.AutoFit()
            xlRange = xlSheet.UsedRange
            xlRange.Borders.LineStyle = 1   'xlContinuous
            xlApp.Visible = True
 
        Catch
            xlApp.DisplayAlerts = False
            xlApp.Quit()
            Throw
        Finally
            If xlCellStart IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlCellStart)
            If xlCellEnd IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlCellEnd)
            If xlRange IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlRange)
            If xlCells IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlCells)
            If xlSheet IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlSheet)
            If xlBooks IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlBooks)
            If xlBook IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlBook)
            If xlApp IsNot Nothing Then System.Runtime.InteropServices.Marshal.ReleaseComObject(xlApp)
 
            GC.Collect()
        End Try
    End Sub
C# (4.0以上)
using System.Data;
        public void ExportExcel(DataTable dt)
        {
            dynamic xlApp = null;
            dynamic xlBooks = null;
            dynamic xlBook = null;
            dynamic xlSheet = null;
            dynamic xlCells = null;
            dynamic xlRange = null;
            dynamic xlCellStart = null;
            dynamic xlCellEnd = null;
            try
            {
                xlApp = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));
                xlBooks = xlApp.Workbooks;
                xlBook = xlBooks.Add;
                xlSheet = xlBook.WorkSheets(1);
                xlCells = xlSheet.Cells;
 
                DataColumn dc;
                object[,] columnData = new object[dt.Rows.Count, 1];
                int row = 1;
                int col = 1;
 
                for (col = 1; (col <= dt.Columns.Count); col++)
                {
                    row = 1;
                    dc = dt.Columns[(col - 1)];
                    // ヘッダー行の出力
                    xlCells[row, col].value2 = dc.ColumnName;
                    row++;
                    // 列データを配列に格納
                    for (int i = 0; (i <= (dt.Rows.Count - 1)); i++)
                    {
                        columnData[i, 0] = string.Format("{0}",dt.Rows[i][(col - 1)]);
                    }
 
                    xlCellStart = xlCells[row, col];
                    xlCellEnd = xlCells[(row + (dt.Rows.Count - 1)), col];
                    xlRange = xlSheet.Range(xlCellStart, xlCellEnd);
                    // Excel書式設定
                    switch (dc.DataType.Name)
                    {
                        case "String":
                            xlRange.NumberFormatLocal = "@";
                            break;
                        case "DateTime":
                            xlRange.NumberFormatLocal = "yyyy/mm/dd";
                            break;
                    }
                    xlRange.value2 = columnData;
                }
 
                xlCells.EntireColumn.AutoFit();
                xlRange = xlSheet.UsedRange;
                xlRange.Borders.LineStyle = 1;  // xlContinuous
                xlApp.Visible = true;
            }
            catch
            {
                xlApp.DisplayAlerts = false;
                xlApp.Quit();
                throw;
            }
            finally
            {
                if (xlCellStart != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlCellStart);
                if (xlCellEnd != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlCellEnd);
                if (xlRange != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlRange);
                if (xlCells != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlCells);
                if (xlSheet != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlSheet);
                if (xlBook != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlBook);
                if (xlBooks != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlBooks);
                if (xlApp != null) System.Runtime.InteropServices.Marshal.ReleaseComObject(xlApp);
 
                GC.Collect();
            }
        }
C# での注意点
遅延バインディングにするため dynamic 型を使用しているので 4.0 以上が必要です。
Microsoft.Csharp の参照設定をしてください。
ネット上のコードで気になったこと
Workbooks の変数格納
Workbooks オブジェクトを変数に格納せず xlSheet = xlBooks.Add.WorkSheets(1); としているものも見受けられました。 
c# - How do I properly clean up Excel interop objects? - Stack Overflow 
試したところ、VB.NET では変数に格納しなくても EXCEL.EXE は終了しましたが、C# では終了しませんでした。サンプルコードでは VB.NET でも変数に格納するようにしています。

get_Range メソッドとRange プロパティ
Range の 取得に get_Range メソッドを使っている例がありましたが、 get_Range メソッドは MSDNに

セルまたはセルの範囲を表す Microsoft.Office.Interop.Excel.Range オブジェクトを取得します。 このメソッドの代わりに Range プロパティを使用してください。

との記載があるのと、c# - Worksheet get_Range throws exception - Stack Overflow 
によると、.NET4.0 からエラーになるようです。サンプルコードでは、Range プロパティを使用するようにしました。

Range.Value と Range.Value2
Excel のセルへの書き込みにValue プロパティと Value2 プロパティを使っているものがあります。両者の違いは

Value プロパティとの相違点は、Value2 プロパティでは、通貨型 (Currency) および日付型 (Date) のデータ型を使用しない点だけです。

のようです。 
なぜ、二つのコードが出回っているかと言うと、VB.NET ではインテリセンスで Value が出て、C# では Value2 が出るため（Value プロパティにはパラメータがあるが、C# はパラメータ付きプロパティをサポートしていないため）で実質的な違いはないようです。 
Parameterized Properties in C# and the mystery of Value2 in Excel – .NET4Office

ReleaseComObject と FinalReleaseComObject
COM の開放に FinalReleaseComObject を使っているものもありましたが、 
How to properly release Excel COM objects: C# code examples によると、 FinalReleaseComObject を使うのは冗長のようですので、サンプルコードではReleaseComObject を使っています。

